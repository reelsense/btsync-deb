#!/bin/sh -e

# Source debconf library.
. /usr/share/debconf/confmodule

# some helpers
db_return_unsigned () {
	set +e
	NEWRET=$(expr match "$RET" '\([0-9]*\)')
	set -e
	if [ "$RET" != "$NEWRET" ]; then
		# garbage inside - repeat entry
		db_fset $1 seen false
		RET=${2:--1}
	fi
}

db_return_integer () {
	set +e
	NEWRET=$(expr match "$RET" '\(-*[0-9]*\)')
	set -e
	if [ "$RET" != "$NEWRET" ]; then
		# garbage inside - repeat entry
		db_fset $1 seen false
		RET=${2:--1}
	fi
}


# since older versions run btsync always as root, we
# should detect if we are updating such an old version
# in order to present "root" as default choice. On a
# new installation the default will be "btsync"
db_fget btsync/managed-configuration seen || RET="true"
ISCONF="${RET}"
db_get btsync/managed-configuration || RET=""
HASDEF="${RET}"
db_fget btsync/runas seen || RET="false"
BTUSER="${RET}"
db_fget btsync/runasgroup seen || RET="false"
BTGROUP="${RET}"
if [ "$ISCONF" = "true" ] && [ "$HASDEF" = "true" ] && [ "$BTUSER" = "false" ]; then
	# it was already configured but the credential
	# configuration was never asked.
	# Since everything is running as root, let's keep it so.
	db_set btsync/runas root
	db_set btsync/runasgroup default
fi
if [ "$ISCONF" = "true" ] && [ "$HASDEF" = "true" ] && [ "$BTGROUP" = "false" ]; then
	# it was already configured but the group credential
	# configuration was never asked.
	# Let's set it to default values
	db_set btsync/runasgroup default
fi
db_get btsync/runas || RET="btsync"
BTUSER="${RET}"
db_get btsync/runasgroup || RET="default"
BTGROUP="${RET}"

############################################
# START OF VISIBLE INTERACTIVE CONFIGURATION
#

# configure default instance via debconf?
db_input high btsync/managed-configuration || true
db_go
db_get btsync/managed-configuration
if [ "$RET" = "false" ]; then
	# no further configuration needed
	exit 0
fi

# configure credentials for btsync
ALLUSERS="root, btsync"
for USERNAME in $(getent passwd | cut -d ":" -f 1 | sort); do
	case "${USERNAME}" in
	root|btsync|nobody)
		# ignore since already included
		;;
	*)
		ALLUSERS="${ALLUSERS}, ${USERNAME}"
		;;
#		if [ $(($(getent passwd ${USERNAME} | cut -d ":" -f 3))) -ge 1000 ]; then
#			ALLUSERS="${ALLUSERS}, ${USERNAME}"
#		fi
	esac
done
db_subst btsync/runas btuids "${ALLUSERS}"
db_input high btsync/runas || true
db_go
db_get btsync/runas
BTNEWUSER=${RET}

# configure group credentials for btsync
ALLGROUPS="default, root, btsync"
for GROUPNAME in $(getent group | cut -d ":" -f 1 | sort); do
	case "${GROUPNAME}" in
	root);;		# ignore
	btsync);;	# ignore
	*)		ALLGROUPS="${ALLGROUPS}, ${GROUPNAME}"
	esac
done
db_subst btsync/runasgroup btgids "${ALLGROUPS}"
db_input high btsync/runasgroup || true
db_go
db_get btsync/runasgroup
BTNEWGROUP=${RET}

# show warning about changed credentials
if [ "$ISCONF" = "true" ] && [ "$BTNEWUSER" != "$BTUSER" -o "$BTNEWGROUP" != "$BTGROUP" ]; then
	db_input critical btsync/runas-changed || true
	db_go
fi

# ask for the niceness of the default instance
RET=-99
until [ $RET -eq 0 -o $RET -ge -20 -a $RET -le 19 ]; do
	db_input high btsync/nice-level || true
	db_go
	db_get btsync/nice-level
	db_return_integer btsync/nice-level -99
done

# ask for webui bind address
RET=""
until [ -n "$(echo $RET | awk -F"." ' $1 <=255 && $2 <= 255 && $3 <= 255 && $4 <= 255 ')" ]; do
	db_input high btsync/webgui-bindaddr || true
	db_go
	db_get btsync/webgui-bindaddr
done

# ask for webui bind port
RET=0
until [ $RET -ge 80 -a $RET -le 65534 ]; do
	db_input high btsync/webgui-bindport || true
	db_go
	db_get btsync/webgui-bindport
	db_return_unsigned btsync/webgui-bindport 0
done

# force webui https
db_input high btsync/webgui-force-https || true
db_go


# start path handling (usally the home directory)
case "${BTNEWUSER}" in
btsync)
	# must be processed first, since this user perhaps does still not exist
	BTNEWHOME="/mnt"
	;;
root)
	# if running as root it's OK to have / as default
	BTNEWHOME="/"
	;;
*)
	BTNEWHOME=$(getent passwd ${BTNEWUSER} | awk -F: '{printf $6}')
	BTNEWUID=$(($(getent passwd ${BTNEWUSER} | awk -F: '{printf $3}')))
	if [ ${BTNEWUID} -le 1000 ]; then
		# not a regular user
		BTNEWHOME="/mnt"
	elif [ -z ${BTNEWHOME} ] || [ ! -d "${BTNEWHOME}" ]; then
		BTNEWHOME="/mnt"
	fi
	;;
esac
db_get btsync/directory_root || RET=""
if [ -z ${RET} ] || [ "${RET}" = "/" ]; then
	db_set btsync/directory_root ${BTNEWHOME}
fi

# ask for web ui start path for folder browsing
RET="\""
until [ $(expr match "${RET}" ".*[\\\"].*") -eq 0 -a $(expr match "${RET}" "/.*") -gt 0 -a -d "${RET}" ]; do
	db_input high btsync/directory_root || true
	db_go
	db_get btsync/directory_root
done


# ask for api key
RET="\""
until [ $(expr match "${RET}" ".*[\\\"].*") -eq 0 ]; do
	db_input medium btsync/api_key || true
	db_go
	db_get btsync/api_key
done

# ask to configure folder defaults
db_input medium btsync/folder_defaults || true
db_go
db_get btsync/folder_defaults || RET="false"
if [ "${RET}" = "true" ]; then
	# use sync archive
	db_input medium btsync/folder_defaults-delete_to_trash || true
	db_go
	# use DHT
	db_input medium btsync/folder_defaults-use_dht || true
	db_go
	# use LAN broadcast
	db_input medium btsync/folder_defaults-use_lan_broadcast || true
	db_go
	# use relay servers
	db_input medium btsync/folder_defaults-use_relay || true
	db_go
	# use tracker servers
	db_input medium btsync/folder_defaults-use_tracker || true
	db_go
	# use predefined hosts
	RET="_"
	until [ -z $RET ] || [ $(expr match "${RET}" ".*[^A-Za-z0-9.:,-].*") -eq 0 ]; do
		db_input medium btsync/folder_defaults-known_hosts || true
		db_go
		db_get btsync/folder_defaults-known_hosts
	done
fi


# ask to configure advanced parameters
db_input medium btsync/advancedcfg || true
db_go
db_get btsync/advancedcfg || RET="false"
if [ "${RET}" = "true" ]; then
	# ask for daemon UMASK
	db_input medium btsync/daemon_umask || true
	db_go
	# ask for the external port
	RET=-1
	until [ $RET -eq 0 -o $RET -ge 1000 -a $RET -le 65534 ]; do
		db_input medium btsync/external_port || true
		db_go
		db_get btsync/external_port
		db_return_unsigned btsync/external_port
	done
	# 
	db_input medium btsync/disk_low_priority || true
	db_go
	#
	db_input medium btsync/lan_encrypt_data || true
	db_go
	#
	db_input medium btsync/rate_limit_local_peers || true
	db_go
	#
	RET=-1
	until [ $RET -ge 60 -a $RET -le 86400 ]; do
		db_input medium btsync/folder_rescan_interval || true
		db_go
		db_get btsync/folder_rescan_interval
		db_return_unsigned btsync/folder_rescan_interval
	done
	#
	RET=-1
	until [ -z $RET ] || [ $RET -ge 1 -a $RET -le 5000 ]; do
		db_input medium btsync/max_file_size_diff_for_patching || true
		db_go
		db_get btsync/max_file_size_diff_for_patching
		db_return_unsigned btsync/max_file_size_diff_for_patching
	done
	#
	RET=-1
	until [ -z $RET ] || [ $RET -ge 1 -a $RET -le 5000 ]; do
		db_input medium btsync/max_file_size_for_versioning || true
		db_go
		db_get btsync/max_file_size_for_versioning
		db_return_unsigned btsync/max_file_size_for_versioning
	done
	#
	RET=-1
	until [ -z $RET ] || [ $RET -ge 1 -a $RET -le 100 ]; do
		db_input medium btsync/send_buf_size || true
		db_go
		db_get btsync/send_buf_size
		db_return_unsigned btsync/send_buf_size
	done
	#
	RET=-1
	until [ -z $RET ] || [ $RET -ge 1 -a $RET -le 100 ]; do
		db_input medium btsync/recv_buf_size || true
		db_go
		db_get btsync/recv_buf_size
		db_return_unsigned btsync/recv_buf_size
	done
	#
	RET=-1
	until [ -z $RET ] || [ $RET -ge 1 -a $RET -le 6000 ]; do
		db_input medium btsync/sync_max_time_diff || true
		db_go
		db_get btsync/sync_max_time_diff
		db_return_unsigned btsync/sync_max_time_diff
	done
	#
	RET=-1
	until [ -z $RET ] || [ $RET -ge 1 -a $RET -le 365 ]; do
		db_input medium btsync/sync_trash_ttl || true
		db_go
		db_get btsync/sync_trash_ttl
		db_return_unsigned btsync/sync_trash_ttl
	done
    # logfile path
    RET=""
	until [ "$RET" != "" ]; do
        db_input medium btsync/log-path || true
        db_go
        db_get btsync/log-path
	done
	# logfile size
	RET=-1
	until [ $RET -ge 1 -a $RET -le 99999 ]; do
		db_input medium btsync/log_size || true
		db_go
		db_get btsync/log_size
		db_return_unsigned btsync/log_size
	done
	# peer expiration days
	RET=-1
	until [ -z $RET ] || [ $RET -ge 0 -a $RET -le 999999 ]; do
		db_input medium btsync/peer_expiration_days || true
		db_go
		db_get btsync/peer_expiration_days
		db_return_unsigned btsync/peer_expiration_days
	done
fi

# remove unused keys from 1.3 versions from debconf database
set +e
db_unregister btsync/device-name
db_unregister btsync/bind-port
db_unregister btsync/use-upnp
db_unregister btsync/limit-download
db_unregister btsync/limit-upload
db_unregister btsync/webgui-username
db_unregister btsync/webgui-password
set -e

