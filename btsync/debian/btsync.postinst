#!/bin/sh
# postinst script for btsync
#
# see: dh_installdeb(1)

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

set -e

# Source debconf library.
. /usr/share/debconf/confmodule

CONFFILE=/etc/btsync/debconf-default.conf
DESKFILE=/usr/share/applications/btsync.desktop
CRTFILE=/usr/share/btsync/debconf-default.crt
KEYFILE=/usr/share/btsync/debconf-default.key
CRTLINK=/etc/btsync/debconf-default.crt
KEYLINK=/etc/btsync/debconf-default.key

add_btsync_system_user() {
	if ! getent passwd btsync >/dev/null; then
		adduser --group --system --no-create-home --home /var/lib/btsync btsync
	fi
	# workaround bug (#531021) in xen-tools
	if ! getent group btsync >/dev/null; then
		addgroup --system btsync
		adduser btsync btsync
	fi
}

create_default_certificates() {
	if [ ! -f ${CRTFILE} -o ! -f ${KEYFILE} ]; then
		(
		openssl req -newkey rsa:2048  -x509 -days 3652.5 -nodes \
		-rand /dev/urandom -out ${CRTFILE} -keyout ${KEYFILE} > /dev/null 2>&1 <<+
.
.
.
BitTorrent Sync
Administration Interface
localhost
root@localhost
+
		) || echo "Warning : Bad SSL config, can't generate certificate."
	fi
}

create_default_instance() {
	set +e
	db_get btsync/runas || RET="btsync"
	BTUSER=${RET}
	db_get btsync/runasgroup || RET="default"
	BTGROUP=${RET}
	db_get btsync/nice-level || RET="0"
	NICE_LEVEL=$(expr match "${RET}" '[ +0]*\(-*[0-9]*\)')
	NICE_LEVEL=${NICE_LEVEL:-0}
    db_get btsync/log-path || RET="/tmp/sync.log"
	LOG_PATH=${RET}
	db_get btsync/external_port || RET=0
	EXTERNAL_PORT=$(expr match "${RET}" '[ +0]*\([0-9]*\)')
	EXTERNAL_PORT=${EXTERNAL_PORT:-0}
	db_get btsync/disk_low_priority || RET="true"
	DISK_LOW_PRIORITY=${RET}
	db_get btsync/lan_encrypt_data || RET="true"
	LAN_ENCRYPT_DATA=${RET}
	db_get btsync/rate_limit_local_peers || RET="false"
	RATE_LIMIT_LOCAL_PEERS=${RET}
	db_get btsync/folder_rescan_interval || RET=600
	FOLDER_RESCAN_INTERVAL=$(expr match "${RET}" '[ +0]*\([0-9]*\)')
	FOLDER_RESCAN_INTERVAL=${FOLDER_RESCAN_INTERVAL:-600}
	db_get btsync/webgui-bindaddr || RET="0.0.0.0"
	LISTEN_ADDR="${RET}"
	db_get btsync/webgui-bindport || RET="8888"
	LISTEN_PORT=$(expr match "${RET}" '[ +0]*\([0-9]*\)')
	db_get btsync/webgui-force-https || RET="false"
	FORCE_HTTPS=${RET}
	db_get btsync/api_key  || RET=""
	API_KEY="${RET}"
	db_get btsync/daemon_umask || RET=""
	UMASK="${RET}"
	db_get btsync/max_file_size_diff_for_patching || RET=""
	MAX_FILE_DIFF_PATCH=$(expr match "${RET}" '[ +0]*\([0-9]*\)')
	db_get btsync/max_file_size_for_versioning || RET=""
	MAX_FILE_VERSIONING=$(expr match "${RET}" '[ +0]*\([0-9]*\)')
	db_get btsync/send_buf_size || RET=""
	SEND_BUF_SIZE=$(expr match "${RET}" '[ +0]*\([0-9]*\)')
	db_get btsync/recv_buf_size || RET=""
	RECV_BUF_SIZE=$(expr match "${RET}" '[ +0]*\([0-9]*\)')
	db_get btsync/sync_max_time_diff || RET=""
	MAX_TIME_DIFF=$(expr match "${RET}" '[ +0]*\([0-9]*\)')
	db_get btsync/sync_trash_ttl || RET=""
	TRASH_TTL=$(expr match "${RET}" '[ +0]*\([0-9]*\)')
	db_get btsync/log_size || RET=10
	LOG_SIZE=$(expr match "${RET}" '[ +0]*\([0-9]*\)')
	LOG_SIZE=${LOG_SIZE:-10}
	db_get btsync/folder_defaults || RET="false"
	FOLDER_DEFAULTS=${RET}
	if [ "${RET}" = "true" ]; then
		db_get btsync/folder_defaults-delete_to_trash || RET="true"
		FOLDER_DEFAULTS_DELETE_TO_TRASH=${RET}
		db_get btsync/folder_defaults-use_lan_broadcast || RET="true"
		FOLDER_DEFAULTS_USE_LAN_BROADCAST=${RET}
		db_get btsync/folder_defaults-use_relay || RET="true"
		FOLDER_DEFAULTS_USE_RELAY=${RET}
		db_get btsync/folder_defaults-use_tracker || RET="true"
		FOLDER_DEFAULTS_USE_TRACKER=${RET}
		db_get btsync/folder_defaults-known_hosts || RET=""
		FOLDER_DEFAULTS_KNOWN_HOSTS=${RET}
	else
		FOLDER_DEFAULTS_DELETE_TO_TRASH="true"
		FOLDER_DEFAULTS_USE_LAN_BROADCAST="true"
		FOLDER_DEFAULTS_USE_RELAY="true"
		FOLDER_DEFAULTS_USE_TRACKER="true"
		FOLDER_DEFAULTS_KNOWN_HOSTS=""
	fi
	db_get btsync/peer_expiration_days || RET=""
	PEER_EXPIRATION_DAYS=${RET}
	db_get btsync/directory_root || RET=""
	DIRECTORY_ROOT="${RET}"
	set -e
	(
	cat <<EOF
//!/usr/lib/btsync/btsync-daemon --config
//
// Default instance automatically created by debconf
//
// DO NOT EDIT THIS FILE MANUALLY - SERIOUSLY!!!
//
// THIS FILE WILL BE OVERWRITTEN AT EVERY UPDATE
// OR RECONFIGURATION SO DO NOT EVEN TRY IT
//
// USE dpkg-reconfigure btsync INSTEAD TO MODIFY
// THE CONFIGURATION
//
EOF
	) > ${CONFFILE}
	if [ "${BTUSER}" != "root" ]; then
		echo "// DAEMON_UID=${BTUSER}" >> ${CONFFILE}
	fi
	if [ "${BTGROUP}" != "default" ]; then
		echo "// DAEMON_GID=${BTGROUP}" >> ${CONFFILE}
	elif [ "${BTUSER}" = "btsync" ]; then
		echo "// DAEMON_GID=btsync" >> ${CONFFILE}
	fi
	if [ "${UMASK}" != "" ]; then
		echo "// DAEMON_UMASK=${UMASK}" >> ${CONFFILE}
	fi
	if [ "${NICE_LEVEL}" != "" -a "${NICE_LEVEL}" != "0" ]; then
		echo "// DAEMON_NICE=${NICE_LEVEL}" >> ${CONFFILE}
	fi
    echo "// LOG_PATH=${LOG_PATH}" >> ${CONFFILE}
	(
	cat <<EOF
{
	"storage_path" : "/var/lib/btsync/",
	"display_new_version": false,
	"disk_low_priority" : ${DISK_LOW_PRIORITY},
	"lan_encrypt_data" : ${LAN_ENCRYPT_DATA},
	"rate_limit_local_peers" : ${RATE_LIMIT_LOCAL_PEERS},
	"folder_rescan_interval" : ${FOLDER_RESCAN_INTERVAL},
	//"folder_defaults.delete_to_trash" : ${FOLDER_DEFAULTS_DELETE_TO_TRASH}, // TODO I should be valid...
	"folder_defaults.use_lan_broadcast" : ${FOLDER_DEFAULTS_USE_LAN_BROADCAST},
	"folder_defaults.use_relay" : ${FOLDER_DEFAULTS_USE_RELAY},
	"folder_defaults.use_tracker" : ${FOLDER_DEFAULTS_USE_TRACKER},
	"folder_defaults.known_hosts" : "${FOLDER_DEFAULTS_KNOWN_HOSTS}",
EOF
	) >> ${CONFFILE}
	if [ -n "${MAX_FILE_DIFF_PATCH}" ]; then
		echo "	\"max_file_size_diff_for_patching\" : ${MAX_FILE_DIFF_PATCH}," >> ${CONFFILE}
	fi
	if [ -n "${MAX_FILE_VERSIONING}" ]; then
		echo "	\"max_file_size_for_versioning\" : ${MAX_FILE_VERSIONING}," >> ${CONFFILE}
	fi
	if [ -n "${SEND_BUF_SIZE}" ]; then
		echo "	\"send_buf_size\" : ${SEND_BUF_SIZE}," >> ${CONFFILE}
	fi
	if [ -n "${RECV_BUF_SIZE}" ]; then
		echo "	\"recv_buf_size\" : ${RECV_BUF_SIZE}," >> ${CONFFILE}
	fi
	if [ -n "${MAX_TIME_DIFF}" ]; then
		echo "	\"sync_max_time_diff\" : ${MAX_TIME_DIFF}," >> ${CONFFILE}
	fi
	if [ -n "${TRASH_TTL}" ]; then
		echo "	\"sync_trash_ttl\" : ${TRASH_TTL}," >> ${CONFFILE}
	fi
	if [ -n "${EXTERNAL_PORT}" -a "${EXTERNAL_PORT}" != "0" ]; then
		echo "	\"external_port\" : ${EXTERNAL_PORT}," >> ${CONFFILE}
	fi
	if [ -n "${LOG_SIZE}" -a "${LOG_SIZE}" != "10" ]; then
		echo "	\"log_size\" : ${LOG_SIZE}," >> ${CONFFILE}
	fi
	if [ -n "${PEER_EXPIRATION_DAYS}" -a "${PEER_EXPIRATION_DAYS}" != "7" ]; then
		echo "	\"peer_expiration_days\" : ${PEER_EXPIRATION_DAYS}," >> ${CONFFILE}
	fi
	if [ -n "${DIRECTORY_ROOT}" -a "${DIRECTORY_ROOT}" != "/" ]; then
		echo "	\"directory_root\" : \"${DIRECTORY_ROOT}\"," >> ${CONFFILE}
	fi
	(
	cat <<EOF
	"webui" :
	{
EOF
	) >> ${CONFFILE}
	if [ -n "${API_KEY}" ]; then
		echo "		\"api_key\" : \"${API_KEY}\"," >> ${CONFFILE}
	fi
	(
	cat <<EOF
		"listen" : "${LISTEN_ADDR}:${LISTEN_PORT}",
		"force_https" : ${FORCE_HTTPS},
		"ssl_certificate" : "${CRTLINK}",
		"ssl_private_key" : "${KEYLINK}"
	}
}
EOF
	) >> ${CONFFILE}


	case "${LISTEN_ADDR}" in
	"0.0.0.0")	WEBADDR="localhost";;
	"127.0.0.1")	WEBADDR="localhost";;
	*)		WEBADDR=${LISTEN_ADDR};;
	esac
	WEBPROT="http"
	[ "${FORCE_HTTPS}" = "true" ] && WEBPROT="https"

	if [ -d /usr/share/applications/ ] ; then
		(
		cat <<EOF
[Desktop Entry]
Name=BitTorrent Sync Management
Comment=BitTorrent Sync default instance management interface
Exec=sensible-browser ${WEBPROT}://${WEBADDR}:${LISTEN_PORT}
Terminal=false
Type=Application
Icon=btsync
Categories=Network;
EOF
		) > ${DESKFILE}
	fi

	chmod 400 ${CONFFILE}
	# if no user certificates are provided, created links to default
	[ ! -f "${CRTLINK}" ] && ln -s "${CRTFILE}" "${CRTLINK}"
	[ ! -f "${KEYLINK}" ] && ln -s "${KEYFILE}" "${KEYLINK}"
	chmod 400 "${CRTLINK}" "${KEYLINK}"
}

remove_default_instance() {
	rm -f ${CONFFILE}
	rm -f ${DESKFILE}
	# remove certificates only if linked to default
	[ -h "${CRTLINK}" ] && rm "${CRTLINK}"
	[ -h "${KEYLINK}" ] && rm "${KEYLINK}"
	# make sure we return a positive result
	[ 0 = 0 ]
}

fix_permissions() {
	if [ -f ${CONFFILE} ]; then
		if [ "${BTGROUP}" != "default" ]; then
			BTPERMS="${BTUSER}:${BTGROUP}"
			chown ${BTUSER}:${BTGROUP} ${CONFFILE} ${CRTLINK} ${KEYLINK}
			chown -R ${BTUSER}:${BTGROUP} /var/lib/btsync
		else
			case "${BTUSER}" in
			btsync)
				BTPERMS="btsync:btsync"
				;;
			root)
				BTPERMS="root:root"
				;;
			*)
				BTPERMS="${BTUSER}"
				;;
			esac
		fi
		chown ${BTPERMS} ${CONFFILE} ${CRTLINK} ${KEYLINK}
		chown -R ${BTPERMS} /var/lib/btsync
		chmod 700 /var/lib/btsync
		if [ "$(stat --printf '%U' ${DIRECTORY_ROOT})" != "${BTUSER}" ]; then
			chmod a+rwx "${DIRECTORY_ROOT}"
		fi
	fi
}

case "$1" in
configure)
	db_get btsync/managed-configuration || RET=false
	if [ "$RET" = "true" ]; then
		add_btsync_system_user
		create_default_certificates
		create_default_instance
		fix_permissions
	else
		remove_default_instance
	fi
	;;

triggered)
	case "$2" in
	btsync-common-changed)
		invoke-rc.d btsync restart
		;;
	bind-shim-changed)
		invoke-rc.d btsync restart
		;;
	*)
		echo "Unhandled trigger '$2' received" >&2 
		;;
	esac
	;;

abort-upgrade|abort-remove|abort-deconfigure)
	;;

*)
	echo "postinst called with unknown argument '$1'" >&2
	exit 1
	;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
